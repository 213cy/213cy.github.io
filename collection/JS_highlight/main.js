// document.body.innerHTML = 'javascript!!';

str = '(() => {\n\t"use strict";\n\n\t// - APPROXIMATION OF E OBTAINED AFTER N ITERATIONS --\n\n\t// eApprox : Int -> Float\n\tconst eApprox = n =>\n\t\tsum(\n\t\t\tscanl(mul)(1)(\n\t\t\t\tenumFromTo(1)(n)\n\t\t\t)\n\t\t\t.map(x => 1 / x)\n\t\t);\n\n\n\t// ---------------------- TEST -----------------------\n\tconst main = () =>\n\t\teApprox(20);\n\n\n\t// ---------------- GENERIC FUNCTIONS ----------------\n\n\t// enumFromTo :: Int -> Int -> [Int]\n\tconst enumFromTo = m =>\n\t\tn => Array.from({\n\t\t\tlength: 1 + n - m\n\t\t}, (_, i) => m + i);\n\n\n\t// mul (*) :: Num a => a -> a -> a\n\tconst mul = a =>\n\t\t// The arithmetic product of a and b.\n\t\tb => a * b;\n\n\n\t// scanl :: (b -> a -> b) -> b -> [a] -> [b]\n\tconst scanl = f => startValue => xs =>\n\t\t// The series of interim values arising\n\t\t// from a catamorphism. Parallel to foldl.\n\t\txs.reduce((a, x) => {\n\t\t\tconst v = f(a[0])(x);\n\n\t\t\treturn [v, a[1].concat(v)];\n\t\t}, [startValue, [startValue]])[1];\n\n\n\t// sum :: [Num] -> Num\n\tconst sum = xs =>\n\t\t// The numeric sum of all values in xs.\n\t\txs.reduce((a, x) => a + x, 0);\n\n\n\t// MAIN ---\n\treturn main();\n})();';
document.querySelector('code').textContent = str;
